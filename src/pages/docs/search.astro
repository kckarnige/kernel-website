---
import type { Result } from "~/lib/search";

import { DOCS_SIDEBAR, KNOWN_LANGUAGES } from "~/config";
import { categorizeSidebar } from "~/lib/docs";
import { groupBy } from "~/lib/utils";
import { cleanMarkdown } from "~/lib/docs";
import {
    init,
    search,
    excerpt
} from "~/lib/search";

const query = new URL(Astro.request.url).searchParams.get("q") || "";
const lang = new URL(Astro.request.url).searchParams.get("lang") || "en";

async function getDocs(lang: string): Promise<Result[]> {
    const pages = await Astro.glob(`~/pages/docs/**/*.md`);
    const localizedPages = pages.filter(page => page.url.includes(`/${lang}/`));

    return localizedPages?.map(page => {
        {
            const path = page.url.split(`/docs/${lang}`)[1] || "/";
            const sidebarCategories = categorizeSidebar(DOCS_SIDEBAR);
            const sidebarCategory = sidebarCategories.find(section => section.children.some(item => item.path === path));
            const sidebarPage = sidebarCategory?.children.find(item => item.path === path);

            return {
                content: page.rawContent(),
                name: sidebarPage.name,
                title: page.frontmatter.title,
                category: sidebarCategory.name,
                path
            }
        }
    });
}

const docs = await getDocs(lang);
init(docs);

const results = query ? search(query).map(r => docs.find(i => i.path === r)) : docs;
---

<section align="center">
    <h1>Search</h1>
    <form action="/docs/search" method="GET">
        <div>
            <input
                value={query}
                name="q"
                type="search"
                placeholder="Search Docs"
            />
            <button type="submit">Search</button>
        </div>
        <select name="lang" value={lang}>
            {Object.entries(KNOWN_LANGUAGES).map(([name, identifier]) => (
                <option selected={lang === identifier} value={identifier}>
                    {name}
                </option>
            ))}
        </select>
    </form>
</section>

<section style="margin-inline: 20px;">
    <h1>Results - {results.length}</h1>
    {Object.entries(groupBy(results, r => r.category)).map(([category, pages]) => (
        <ul>
            <li role="presentation">
                <strong>{category}</strong>
            </li>
            {(pages as Result[]).map(page => (
                <li>
                    <a href={`/docs/${lang}${page.path}`}>
                        <h2>{excerpt(page.title, query)}</h2>
                        <p set:html={excerpt(cleanMarkdown(page.content), query)} />
                    </a>
                </li>
            ))}
        </ul>
    ))}
</section>